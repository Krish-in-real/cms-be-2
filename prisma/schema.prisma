generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id         Int     @id @default(autoincrement())
  firstName  String
  lastName   String
  password   String
  email      String  @unique
}

model Participant {
  participantId      Int                   @id @default(autoincrement())
  firstName          String                @db.VarChar(50)
  lastName           String                @db.VarChar(50)
  email              String                @unique @db.VarChar(100)
  password           String                @db.VarChar(255)
  role               Role
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt

  eventRegistrations Enrollment[]
  eventSubmissions   Submission[]
  feedbacksGiven     Feedback[]            @relation("FeedbackEvaluator")
  mentorshipsAsMentor Mentorship[]  @relation("Mentor")
  mentorshipsAsMentee Mentorship[]  @relation("Mentee")
}

model Conference {
  eventId       Int       @id @default(autoincrement())
  eventName     String    @db.VarChar(100)
  eventDescription   String?
  startDateTime     DateTime
  endDateTime       DateTime
  eventLocation      String?   @db.VarChar(255)
  meetingLink   String?   @db.VarChar(255)
  eventRecordingLink  String?  @db.VarChar(255)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  eventRegistrations   Enrollment[]
  eventSubmissions   Submission[]
  eventSchedules     Schedule[]
}

model Enrollment {
  enrollmentId    Int           @id @default(autoincrement())
  participantId   Int
  eventId         Int
  registrationDateTime DateTime
  ticketCategory      TicketType
  paymentStatus   PaymentStatus @default(pending)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  participant     Participant @relation(fields: [participantId], references: [participantId])
  event           Conference       @relation(fields: [eventId], references: [eventId])
}

model Submission {
  submissionId    Int         @id @default(autoincrement())
  eventId         Int
  participantId   Int
  submissionTitle           String      @db.VarChar(255)
  submissionAbstract        String?
  submissionDateTime  DateTime
  submissionStatus          SubmissionStatus @default(submitted)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  event           Conference       @relation(fields: [eventId], references: [eventId])
  participant     Participant @relation(fields: [participantId], references: [participantId])
  submissionFeedbacks       Feedback[]
}

model Feedback {
  feedbackId    Int         @id @default(autoincrement())
  submissionId  Int
  evaluatorId   Int
  feedbackComments      String?
  feedbackRating        Int          
  reviewDateTime    DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  submission    Submission  @relation(fields: [submissionId], references: [submissionId])
  evaluator     Participant @relation("FeedbackEvaluator", fields: [evaluatorId], references: [participantId])
}

model Schedule {
  scheduleId    Int         @id @default(autoincrement())
  eventId       Int
  scheduleTime          DateTime
  scheduleLocation      String?     @db.VarChar(255)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  event         Conference       @relation(fields: [eventId], references: [eventId])
}

model Mentorship {
  mentorshipProgramId Int            @id @default(autoincrement())
  mentorId     Int
  menteeId     Int
  programStartDate    DateTime
  programEndDate      DateTime?
  programStatus       MentorshipStatus @default(active)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  mentor       Participant @relation("Mentor", fields: [mentorId], references: [participantId])
  mentee       Participant @relation("Mentee", fields: [menteeId], references: [participantId])
}

enum Role {
  participant
  organizer
  reviewer
}

enum TicketType {
  regular
  student
  vip
}

enum PaymentStatus {
  pending
  completed
  failed
}

enum SubmissionStatus {
  submitted
  under_review
  accepted
  rejected
}

enum MentorshipStatus {
  active
  completed
  cancelled
}
